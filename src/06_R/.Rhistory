c(1,2,3)
1:3
c(1,2,3,4,5,6,7,8,9,10)
1:10
paste(1:12,c('st','nd',rep('th',8))
paste(1:12,c('st','nd',rep('th',8)))
paste(1:12,c('st','nd',rep('th',8)))
paste(1:12,c('st','nd',rep('th',8)),sep="")
paste(1:12,c('st','nd',rep('th',9)),sep="")
paste(1:12,c('st','nd',rep('th',10)),sep="")
nth <- paste(1:12,c('st','nd',rep('th',10)),sep="")
paste(month.name, nth, sep=":")
paste(month.name, nth, sep="은 ")
paste(month.name, nth, sep="은 ", collapse=" / ")
ls(all.names= TRUE)
rm(nth)
nth
rm(list)
rm(list=ls())
ls(all.names = T)
rm(list=ls(all.names = TRUE))
rm(list=ls())
rm(list=ls(all.names = TRUE))
ls
rm(list=ls(all.names = TRUE))
ls(all.names = T)
ls(all.names = TRUE)
a <- 10
.a <- 10
rm(list=ls(all.names = TRUE))
ls(all.names = TRUE)
datasets::iris
MASS::Cars93
MASS::Cars93
.libPaths()
Cars93
.libPaths()
kor("한국","일본","미국")
c("한국","일본","미국")
kor <- c("한국","일본","미국")
kor <- c(한국,일본,미국)
kor <- c(한국,일본,미국)
eng <- c("korea","japan","usa")
paste(kor)
paste(kor,eng)
paste(kor,eng,collapse=":")
paste(kor,eng,sep=":")
MASS::Cars93
.libPaths()
Cars93
paste(kor,eng,sep=":")
msg <- paste(kor,eng,sep=":")
library()
library("MASS")
MASS::Cars93
Cars93
Cars93
MASS::Cars93
require("MASS")
require(MASS)
MASS::Cars93
.libPaths()
Cars93
edit(Cars93)
Cars93
head(Cars93)
head(Cars93, 3)
tail(cars93)
tail(Cars93)
tail(Cars93, 3)
detach("package:MASS", unload=TRUE)
tail(Cars93, 3)
?mean
hep(mean)
?iris
library(help="MASS")
a <- 10
kor <- c('한국','일본본')
kor <- c('한국','일본')
a <- 10
kor <- c('한국','일본')
edit(iris)
a <- 10+7i
a <- 10+7i;
class (a)
a <- 'hello'
a <- "hello"
a <- 'i say, "hello"'
cat(a)
a <- 'i say, "
he
llo"'
cat(a)
class(a)
mode(a
)
typeof(a)
methods(is)
is.character(a)
as.character(100)
b <- 10.1
b <- 10
is.numeric(b)
as.character(b)
as.integer(10.9)
c <- TRUE;
is.logical(c)
class(c)
as.numeric(c)
as.character(c)
str(a)
str(b)
str(c)
result <- 0
add <- function(a,b)
return()
temp <- add(1,2)
temp <- add(1,2)
add <- function(a,b){
result <<- a+b
return()
}
result
return()
result
temp <- add(1,2)
result
result
temp <- add(1,2)
result
(temp <- add(b=10, a=1))
is.null
d <- c(2,4,NA,6,NaN,10/0)
mean(d, na.rm=T)
mean(d)
mean(d, na.rm= TRUE)
d <- c(2,4,NA,6,NAN)
d <- c(2,4,NA,6,NaN)
mean(d, na.rm = T)
d <- c(2,4,6,NA,8,10)
d(1)
d[1]
is.na(d)
is.na(d[4])
?is.na
complete.cases(d)
d[c(1,2,3,5,6)]
d[complete.cases(d)]
na.omit(d)
mean(d, na.rm=TRUE)
boxplot(d)
gender1 <- c('남','여','남','여')
gender1[4]
gender1[5] <- '여여'
gender1
gender1[5] <- '여'
gender1
class(gender1)
class(gender1) # vector 변수의 타입은 요소 하나하나의 타입입
gender1[5] <- '중성성'
gender1[5] <- '중성'
gender <- factor('남','여','남','여'), levels=c('남','여')
gender
gender
gender <- factor('남','여','남','여'), levels=c('남','여')
gender <- factor('남','여','남','여'), levels=c('남','여'))
gender <- factor('남','여','남','여') levels=c('남','여')
gender <- factor(c('남','여','남','여') ,levels=c('남','여'))
gender
gender[5] <- '중성성'
gender[5] <- '중성'
gender
class(gender)
str(gender)
na.omit(gender)
nlevels(gender)
levels(gender)
nlevels(gender)
level <- factor
level <- factor(c("좋음","보통","보통"), levels=c("매우좋음","좋음","보통","나쁨","매우나쁨"))
level <- factor(c("좋음","보통","보통"), levels=c("매우좋음","좋음","보통","나쁨","매우나쁨"), ordered=TRUE)
level
level[4]="매우좋음"
level[5]="몰라라"
level
nlevels(level)
levels(level)
gender <- c('남','남','여여')
gender <- c('남','남','여')
gender
class(gender)
gender <- as.factor(gender)
gender
gender <- c('남','남','여','중성성')
gender <- c('남','남','여','중성')
gender <- as.factor(gender)
gender
gender <- as.character(gender)
class(gender)
gender
gender <- factor(gender, levels=c("남","여여"))
gender <- factor(gender, levels=c("남","여"))
gender
class(gender)
gender <- factor(gender, levels=c("남","여")) #범주형 변수로 변환(추천)
gender <- as.character(gender)
gender <- factor(gender, levels=c("남","여")) #범주형 변수로 변환(추천)
gender <- as.character(gender)
gender <- factor(gender, levels=c("남","여")) #범주형 변수로 변환(추천)
gender <- as.character(gender)
gender <- factor(gender, levels=c("남","여")) #범주형 변수로 변환(추천)
gender
gender <- as.character(gender)
gender
gender <- factor(gender, levels=c("남","여")) #범주형 변수로 변환(추천)
gender
data <- c(11,22,33,'test')
data
class(data)
data
class(data)
data <- c(11,22,33,TRUE)
class(data)
data
data <- c('a',TRUE)
class(data)
data
data <- c(10,20,1+10i, 'hello',TRUE)
data
class(data)
data <- 1:4
data
data
data <- 1:100
data
data[4] <- 40
data
data[1] #첫번째 값 반환
names(data)
names(data) <- c('a','b','c','d')
data[1] #첫번째 값 반환
data
data <- 1:10
names(data) <- c('a','b','c','d','e','f','g','h','i')
data
names(data) <- c('a','b','c','d','e','f','g','h','i','j')
data
data[1]
data['a']
data[c(1,2)]
data[1,2]
data[c('a열','b열','c열','d열')]
data
data[c(1:4)]
data[1:4]
data[c('a열':'d열열')]
data[-2]
data[-c(2,3)]
data
data[data>4]
data[c,(T,T,T,T,F,F,F,F,T,T)]
data[c(T,T,T,T,F,F,F,F,T,T)]
names(data)
data['a열열']
data['a열']
length(data)
NROW(data)
nrow(data)
NROW(data)
nrow(data)
2 %in% data
score <- c(80, 100, 90, NA, 70, 70)
score
names(score) <- c('a','b','c','d','e','f')
score
avg <- mean(score, na.rm = TRUE)
avg
cat('평균 = ', avg)
paste('평균 =',avg)
score[score>80]
score[score>=80]
score[complete.cases(score)][score>=80]
temp[temp>=80]
temp <- score[complete.cases(score)][score>=80]
temp[temp>=80]
temp <- score[complete.cases(score)]
temp[temp>=80]
######################## 함수 ###############################
ax2_b.add
######################## 함수 ###############################
ax2_b.add <- function(a, b)
return(2*a + b)
ax2_b.add
ax2_b.add()
######################## 함수 ###############################
ax2_b.add <- function(a=0, b=0){
return(2*a + b)
}
ax2_b.add()
ax2_b.add(10)
ax2_b.add(10,1)
ax2_b.add(b=10) #a= 0, b= 10
ax2_b.add(10,1) #a= 10, b= 1
a <- 10
class(a)
#6.1 character()
charVector <- character()
charVector
charVector
is.vector(charVector)
class(charVector)
length(charVector)
charVector[1] <- 'R'
charVector
charVector <- character(5)
?charVector
charVector
charVector[1] ='안녕'; charVector[2]='R'; charVector[3]='수업중'
charVector
charVector[6] <- 'test'
charVector
charVector[8] <- 'test2'
charVector
intVec <- numeric()
intVec
is.vector(intVec)
class(intVec)
intVec <- numeric(2)
intVec
intVec[3] = 12.1
intVec
intVec[5] = 35
intVec
intVec[7] = 9.67
intVec
intVec[4] = 'r'
intVec
intVec
logicVec <- logical()
logicVec[1] <- TRUE
logicVec
logicVec[2] <- F
logicVec
?seq
(a <- seq(from=1, to=10, by=1))
seq(1,10)
seq(1,10,2)
seq(from=1,to=10,by=2)
seq(from=1,to=100, length.out=11)
a <- seq(1, 100, 11)
is.vector(a)
seq(10,-10,=2)
seq(10,-10,-2)
seq(0,1,0.1)
seq(1,9,pi)
pi <- 3
pi
cat <- 10
cat('pi 값은 ', pi)
return(a+b)
return(a+b)
cat <- 10
cat('pi 값은 ', pi)
return(a+b)
rm(cat)
cat('pi 값은 ', pi)
cat <- function(a,b){
return(a+b)
}
cat('pi 값은 ', pi)
rm(cat)
?rep
rep(1:4, 2)
rep(1:4, times=2)
rep(1:4, each=2)
rep(1:4 2, 5, 2)
rep(1:4 2, 5, 2)
rep(1:4, 2, 5, 2)
rep(1:4, times=2, each=2)
rep(1:4, times=2 length.out= 5, each=2)
rep(1:4, times=2, length.out= 5, each=2)
a <- c(1,2,3)
b <- c(10,20,30)
a + b
a - b
a * b
a / b
a %% b
c(a,b)
a <- c(1,2,3)
b <- c('hello')
c <- c(T,F)
c(a,b,c)
a <- append(a, c(4,5,6))
a
a[8]
a[10]
a[8] <- 8
a[10] <- 10
a
a <- c(1,2,3,4,5,6)
b <- c(2,4,6,8,10,12)
union(a,b)
intersect(a,b)
intersect(b,a)
setdiff(a,b)
setdiff(b,a)
setequal(a,b)
setequal(c(1,2),c(2,1))
setequal(a, c(intersect(a,b), setdiff(a,b)))
student <- list(name='홍길동동')
student <- list(name='홍길동', age='25')
student
student$name
student('name')
student('name')
student['name']
student$name
student[1]
student[[1]]
student[1]    # $name [1]홍길동
student[[1]]  # [1]홍길동
student$age <- NULL
student
NROW(student)
length(student)
studentVec <- unlist(student)
is.vector(studentVec)
student$score <- 100
student
NROW(student)
length(student)
studentVec
as.list(studentVec)
student2 <- as.list(studentVec)
student2
student
colMatrix <- matrix(1:15)
colMatrix
colMatrix <- matrix(1:15, nrow=5, ncol=3)
colMatrix
?matrix
rowMatrix <- matrix(1:15, nrow=5, ncol=3, byrow = F)
rowMatrix
rowMatrix <- matrix(1:15, nrow=5, ncol=3, byrow = T)
rowMatrix
# dimnames
rowMatrix <- matrix(1:15, nrow=5, ncol=3, byrow = T)
# dimnames
rowMatrix <- matrix(1:15, nrow=5, ncol=3, byrow = TRUE, dimnames = list(c("R1","R2","R3","R4","R5"),c("C1","C2","C3","C4")))
# dimnames
rowMatrix <- matrix(1:15, nrow=5, ncol=3, byrow = TRUE, dimnames = list(c("R1","R2","R3","R4","R5"),c("C1","C2","C3",)))
rowMatrix
# dimnames
rowMatrix <- matrix(1:15, nrow=5, ncol=3, byrow = TRUE, dimnames = list(c("R1","R2","R3","R4","R5"),c("C1","C2","C3"))
rowMatrix
rowMatrix
# dimnames
rowMatrix <- matrix(1:15, nrow=5, ncol=3, byrow = TRUE, dimnames = list(c("R1","R2","R3","R4","R5"),c("C1","C2","C3"))
# dimnames
rowMatrix <- matrix(1:15, nrow=5, ncol=3, byrow = TRUE, dimnames = list(c("R1","R2","R3","R4","R5"),c("C1","C2","C3")))
rowMatrix
# dimnames
rowMatrix <- matrix(1:15, nrow=5, ncol=3, byrow = TRUE, dimnames = list(c("R1","R2","R3","R4","R5"),c("C1","C2","C3")))
rowMatrix
rowMatrix[1,3]
rowMatrix['R1','C3']
rowMatrix[1:3,1:2]
rowMatrix['R1':'R3','C1':'C2']
rowMatrix['R1':'R3','C1':'C2']
rowMatrix[C(1,3,5)]
rowMatrix[c(1,3,5)]
rowMatrix[c('R1','R3','R5')]
rowMatrix[c('R1','R3','R5'),]
rowMatrix[, c('C2','C3')]
rowMatrix[1:3,1:2]
rowMatrix['R1':'R3','C1':'C2']
rowMatrix[c(1,3,5),]
rowMatrix[c(1,3,5)]
dim(rowMatrix)
NROW(rowMatrix)
nrow(rowMatrix)
NCOL(rowMatrix)
ncol(rowMatrix)
dimnames(rowMatrix)
dimnames(rowMatrix) <- list(c('1행','2행','3행','4행','5행행'))
rowMatrix
dimnames(rowMatrix) <- list(c('1행','2행','3행','4행','5행'))
rowMatrix
colnames(rowMatrix)
dimnames(rowMatrix) <- c('1월','2월','3월','4월','5월월')
dimnames(rowMatrix) <- c('1월','2월','3월','4월','5월')
rowMatrix
dimnames(rowMatrix) <- c('1월','2월','3월','4월','5월')
rownames(rowMatrix) <- c('1월','2월','3월','4월','5월')
rownames(rowMatrix)
colnames(rowMatrix) #열이름
colnams(rowMatrix) <- c('a','b','c')
rowMatrix
colnams(rowMatrix) <- c('a','b','c')
colnames(rowMatrix) <- c('a','b','c')
rowMatrix
rowMatrix['1월','a']
rowMatrix['1월','a', drop=F]
rowMatrix
rowMatrix['1월',]
rowMatrix['1월', , drop=FALSE]
rowMatrix
rowMatrix[c(1:3),c(1:2)]
rowMatrix[-3,c('a','b')]
rowMatrix[-3,]
rowMatrix[-3]
