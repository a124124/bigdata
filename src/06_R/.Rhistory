gender <- factor(c("M", "F", "M", "F", "M"))
math <- c(85, 76, 99, 88, 40)
name
gender
math
df4 <- data.frame(name,gender,math)
df4
str(df4$name)
str(df4)
# 위에서 만든 데이터프레임에 대해 다음 작업을 수행하시오.
# (a) stat 변수를 추가하시오. stat <- c(76, 73, 95, 82, 35)
stat <- c(76, 73, 95, 82, 35)
df4 <- data.frame(stat)
df4
df4 <- data.frame(name,gender,math,stat)
df4
# (b) math 변수와 stat 변수의 합을 구하여 score 변수에 저장하시오.
df4 <- data.frame(name,gender,math,stat,score= df4$math+df4$stat)
df4
df4 <- data.frame(name,gender,math)
df4
str(df4)
df4
df4 <- cbind(stat)
df4
df4 <- data.frame(name,gender,math)
df4
str(df4)
df4 <- cbind(df4,stat)
df4
# (b) math 변수와 stat 변수의 합을 구하여 score 변수에 저장하시오.
df4 <- cbind(df4,score= df4$math+df4$stat)
df4
df4
df4 <- cbind(df4,stat)
df4
name <- c("Potter", "Elsa", "Gates", "Wendy", "Ben")
gender <- factor(c("M", "F", "M", "F", "M"))
math <- c(85, 76, 99, 88, 40)
df4 <- data.frame(name,gender,math)
df4
# 위에서 만든 데이터프레임에 대해 다음 작업을 수행하시오.
# (a) stat 변수를 추가하시오. stat <- c(76, 73, 95, 82, 35)
stat <- c(76, 73, 95, 82, 35)
df4 <- cbind(df4,stat)
df4
# (b) math 변수와 stat 변수의 합을 구하여 score 변수에 저장하시오.
df4 <- cbind(df4,score= df4$math+df4$stat)
df4
grade <- "C"
df4
(if(df4$score<69){
grade <- "C"
df4 <- cbind(df4, grade)
})
df4 <- cbind(df4, grade= if(df4$score >= 150){
grade = "A"
}else if(df4$score <150 & df4$score>=100){
grade = "B"
}else{
grade = "C"
}
)
df4 <- cbind(df4, grade= if(score >= 150){
grade = "A"
}else if(score <150 & score>=100){
grade = "B"
}else{
grade = "C"
}
)
df4 <- cbind(df4, grade= if(score >= 150){
grade = "A"
}else if(score <150 & score>=100){
grade = "B"
}else{
grade = "C"
}
)
df4 <- cbind(df4, grade= if(score >= 150){
grade = "A"
}else if(score <150 & score>=100){
grade = "B"
}else{
grade = "C"
}
)
df4 <- cbind(df4, grade= if(df4$score >= 150){
grade = "A"
}else if(df4$score <150 & df4$score>=100){
grade = "B"
}else{
grade = "C"
}
)
df4 <- data.frame(name,gender,math)
df4
str(df4)
df4 <- cbind(df4, grade= if(df4$score >= 150){
grade = "A"
}else if(df4$score <150 & df4$score>=100){
grade = "B"
}else{
grade = "C"
}
)
df4
# 위에서 만든 데이터프레임에 대해 다음 작업을 수행하시오.
# (a) stat 변수를 추가하시오. stat <- c(76, 73, 95, 82, 35)
stat <- c(76, 73, 95, 82, 35)
df4 <- cbind(df4,stat)
df4
# (b) math 변수와 stat 변수의 합을 구하여 score 변수에 저장하시오.
df4 <- cbind(df4,score= df4$math+df4$stat)
df4
df4 <- cbind(df4, grade= if(df4$score >= 150){
grade = "A"
}else if(df4$score <150 & df4$score>=100){
grade = "B"
}else{
grade = "C"
}
)
df4 <- cbind(df4, grade= c(if(df4$score >= 150){
grade = "A"
}else if(df4$score <150 & df4$score>=100){
grade = "B"
}else{
grade = "C"
}
))
df4 <- cbind(df4, grade= if(df4$score >= 150){
grade = "A"
}else if(df4$score <150 & df4$score>=100){
grade = "B"
}else{
grade = "C"
}
)
df4
df4 <- cbind(df4, grade= if(df4$score >= 150){
grade = "A"
}else if(df4$score <150 & df4$score>=100){
grade = "B"
}else{
grade = "C"
}
)
df4
str(score)
str(df4$score)
# 위에서 만든 데이터프레임에 대해 다음 작업을 수행하시오.
# (a) stat 변수를 추가하시오. stat <- c(76, 73, 95, 82, 35)
stat <- as.numeric(c(76, 73, 95, 82, 35))
df4 <- cbind(df4,stat)
df4
df4 <- cbind(df4, grade= if(df4$score >= 150){
grade = "A"
}else if(df4$score <150 & df4$score>=100){
grade = "B"
}else{
grade = "C"
}
)
df4
df4 <- data.frame(name,gender,math)
df4
str(df4)
# 위에서 만든 데이터프레임에 대해 다음 작업을 수행하시오.
# (a) stat 변수를 추가하시오. stat <- c(76, 73, 95, 82, 35)
stat <- c(76, 73, 95, 82, 35)
df4 <- cbind(df4,stat)
df4
# (b) math 변수와 stat 변수의 합을 구하여 score 변수에 저장하시오.
df4 <- cbind(df4,score= df4$math+df4$stat)
df4
L1 <- list(name="scott",sal=3000)
L1
L1$sal * 2
result1 <- L1$sal * 2
result1
L1
result1
result1 <- L1$sal * 2
result1
L2 <- list(name="scott",c(100,200,300))
L2
L2 <- list("scott",c(100,200,300))
L2
# [문제18] 다음 리스트에서 A를 "Alpha"로 대체한다.
# list(c(3,5,7), c(“A”, “B”, “C”))
list(c(3,5,7), c(“A”, “B”, “C”))
# [문제18] 다음 리스트에서 A를 "Alpha"로 대체한다.
# list(c(3,5,7), c(“A”, “B”, “C”))
(list(c(3,5,7), c(“A”, “B”, “C”)))
# [문제18] 다음 리스트에서 A를 "Alpha"로 대체한다.
# list(c(3,5,7), c(“A”, “B”, “C”))
list(c(3,5,7), c("A", "B", "C"))
list(c(3,5,7), c("A", "B", "C"))
list
list(c(3,5,7), c("A", "B", "C"))
list(c(3,5,7), c("A", "B", "C"))
L3 <- list(c(3,5,7), c("A", "B", "C"))
L3
L3[[2]]
L3[2]
workerMatrix
L3[2]
L3[2,1]
L3[2,]
L3[2]
L3[2] <- "Alpha"
L3
L3 <- list(c(3,5,7), c("A", "B", "C"))
L3
L3[[2],1] <- "Alpha"
L3[[2]] <- "Alpha"
L3
L3[[2,2,]] <- "Alpha"
L3 <- list(c(3,5,7), c("A", "B", "C"))
L3
L3[[2]]
L3[[2](1)]
L3[[2]1)]
L3[2]
L3[2,1]
L3[2,1,]
L3[2,,1]
L3[2,,]
L3[[2]]
L3[[2],[1]]
L3[c(2)]
L3[c(2,1)]
L3[c(1,1,)]
L3[c(1,,)]
L3[c(1,)]
L3[c(,1)]
L3[c(1)]
L3[c(1,1)]
L3[c(1,1,1)]
L3[c(1,1,1,4)]
L3
L3
L3[c(1,1,1,2)]
L3[c(2)]
L3[c(2,2)]
L3[c(2,1)]
L3[c(2,1,3)]
# [문제19] 다음 리스트에서 첫 번째 원소(alpha)의 각 값에 10을 더하여 출력한다.
# list(alpha=0:4, beta=sqrt(1:5), gamma=log(1:5))
L4 <- list(alpha=0:4, beta=sqrt(1:5), gamma=log(1:5))
L4
L4$alpha +10
L5 <-list(math=list(95, 90), writing=list(90, 85), reading=list(85, 80))
L5
L5
unlist(L5)
mean(unlist(L5))
mean(L5)
mean(unlist(L5))
str(iris)
rowname(iris)
rownames(iris)
colnames(iris)
iris[,2]
iris[,3]
iris[,4]
iris[,5]
mean(iris[,5])
mean(iris[,4])
mean(iris[,1:4])
mean(iris[1:4])
mean(iris[,1])
# [문제5] 1부터 100으로 구성되는 7개의 중복되지 않는 데이터를 추출하여 count 라는 백터를 만든다.
sample(1,100)
# [문제5] 1부터 100으로 구성되는 7개의 중복되지 않는 데이터를 추출하여 count 라는 백터를 만든다.
sample(1:100,7)
week.korname <- c("일요일","월요일","화요일","수요일","목요일","금요일","토요일")
# [문제5] 1부터 100으로 구성되는 7개의 중복되지 않는 데이터를 추출하여 count 라는 백터를 만든다.
sample(1:100,7)
# [문제5] 1부터 100으로 구성되는 7개의 중복되지 않는 데이터를 추출하여 count 라는 백터를 만든다.
count <- sample(1:100,7)
cat(week.korname[i],count[i])
cat(week.korname[i],count[i])
cat(week.korname[i],count[i])
cat(week.korname[1],count[2])
cat(week.korname[1],count[1])
order(iris, Petal.Length)
order(data)
data <- c(10,30,100,1,3)
data
order(data)
sort(data, decreasing = T)
sort(iris, Petal.Length)
sort(iris$Petal.Length, decreasing = T)
#iris 데이터를 Sepal.Length 기준으로 내림차순 정렬
orderBy(~-Sepal.Length, data = iris) # (1)
data[order(data)] # sort(data) 와 같음
sort(iris$Sepal.Length, decreasing = T)
order(iris$Sepal.Length, decreasing = T)
iris[order(iris$Sepal.Length, decreasing =  T),] # (1)과 동일
# [문제22] iris 데이터를 정렬한다
# Petal.Length를 기준으로 내림차순으로 정렬하세요
iris[order(iris$Petal.Length, decreasing =  T),] # (1)과 동일
# Sepal.Width 를 내림차순 정렬하세요
iris[order(iris$Sepal.Width, decreasing =  T),]
order(iris$Sepal.Length, decreasing = T)
# [문제 23] iris 데이터의 종별 데이터 개수 출력한다
order(iris$Sepal.Length, decreasing = T)
# [문제 23] iris 데이터의 종별 데이터 개수 출력한다
sum(iris$Sepal.Length)
# [문제 23] iris 데이터의 종별 데이터 개수 출력한다
sum(iris$Species=='setosa')
sum(iris$Species=='virginica')
sum(iris$Species=='versicolor')
sum(iris$Species=='versicolor')
iris$Species
iris$Species=='versicolor'
table(iris$Species)
table(iris$Species)
# [문제 24] 종별 Sepal.Length의 합을 출력한다.
table(iris$Species, sum(iris$Sepal.Length)
# [문제 24] 종별 Sepal.Length의 합을 출력한다.
table(iris$Species, sum(iris$Sepal.Length))
# [문제 24] 종별 Sepal.Length의 합을 출력한다.
table(iris$Species, sum(iris$Sepal.Length))
summaryBy(Sepal.Length+Petal.Length ~ Species, data=iris, FUN=mean)
tapply(iris$Sepal.Length, iris$Species, mean)
# [문제 24] 종별 Sepal.Length의 합을 출력한다.
tapply(iris$Sepal.Length, iris$Species, FUN=sum)
# [문제 25] Sepal.Length, Sepal.Width, Petal.Length, Petal.Width의 평균을 출력
# Apply, lappy, sapply이용
lapply(iris$Sepal.Length, iris$Species, mean)
tapply(Petal.Length, Species, mean)
tapply(iris$Petal.Length, iris$Species, mean)
# [문제 25] Sepal.Length, Sepal.Width, Petal.Length, Petal.Width의 평균을 출력
# Apply, lappy, sapply이용
apply(iris$Petal.Length, iris$Species, mean)
# [문제 25] Sepal.Length, Sepal.Width, Petal.Length, Petal.Width의 평균을 출력
# Apply, lappy, sapply이용
lapply(iris$Petal.Length, iris$Species, mean)
# 종별 Sepal.Length의 평균 출력
tapply(iris$Petal.Length, iris$Species, mean)
tapply(iris$Petal.Length, iris$Species, mean)
tapply(iris$Petal.Length, iris$Species, sum)
# [문제 26] 꽃받침의 길이(Sepal.Length)가 가장 긴 꽃의 종은 무엇인가요?
which.max(iris$Sepal.Length)
# [문제 26] 꽃받침의 길이(Sepal.Length)가 가장 긴 꽃의 종은 무엇인가요?
which.max(iris$Sepal.Length)
# [문제 26] 꽃받침의 길이(Sepal.Length)가 가장 긴 꽃의 종은 무엇인가요?
iris[which.max(iris$Sepal.Length),]
# [문제 26] 꽃받침의 길이(Sepal.Length)가 가장 긴 꽃의 종은 무엇인가요?
iris$Species[which.max(iris$Sepal.Length),]
# [문제 26] 꽃받침의 길이(Sepal.Length)가 가장 긴 꽃의 종은 무엇인가요?
iris[which.max(iris$Sepal.Length),]
# 종별 Sepal.Length의 평균 출력
tapply(iris$Petal.Length, iris$Species, mean)
# 종별 Sepal.Length의 평균 출력
tapply(iris$Petal.Length, iris$Species, mean)
m1 <- matrix(seq(10,38,2),ncol=5)
m1
m1 <- matrix(seq(10,38,2),ncol=5, byrow=T)
m1
m1 <- matrix(seq(10,38,2),ncol=5)
m1
m1 <- matrix(seq(10,38,2),ncol=5 byrow=T)
m1 <- matrix(seq(10,38,2),ncol=5 ,byrow=T)
m1
row_max <- apply(m1,2,max)
row_max
m1 <- matrix(seq(10,38,2),ncol=5 ,byrow=T)
m1
row_max <- apply(m1,2,max)
row_max
#m1 에서 열 단위의 최대값을 추출하여 col_max 에 저장한다.
col_max <- apply(m1,1,max)
col_max
row_max
#m1 에서 열 단위의 최대값을 추출하여 col_max 에 저장한다.
col_max <- apply(m1,1,max)
col_max
m1; m2; m_max_v; m_min_v; row_max; col_max;
# m1, m2, m_max_v, m_min_v, row_max, col_max를 화면에 출력한다.
m1;
m2;
m1; m2; m_max_v; m_min_v; row_max; col_max;
names(v3) <- LETTERS[1:4]
v3
paste(week.korname, count, sep=':', collapse = ' ')
# 값이 가장 큰 요일의 명칭을 출력한다.
which.max(count)
# 값이 가장 큰 요일의 명칭을 출력한다.
which.max(count)
# 값이 가장 큰 요일의 명칭을 출력한다.
which.max(-count)
# [문제5] 1부터 100으로 구성되는 7개의 중복되지 않는 데이터를 추출하여 count 라는 백터를 만든다.
count <- sample(1:100,7)
paste(week.korname, count, sep=':', collapse = ' ')
# 값이 가장 큰 요일의 명칭을 출력한다.
which.max(-count)
# 값이 가장 큰 요일의 명칭을 출력한다.
week.korname[which.max(count)]
# 값이 가장 작은 요일의 명칭을 출력한다.
week.korname[which.max(-count)]
# 50보다 큰 값에 해당하는 요일의 명칭을 출력한다.
week.korname[count>50]
m2
alpha
df1 <- data.frame(x=c(1:5),y=c(seq(2,10,2)))
df1
df4
str(df4)
df4$stat <- c(76, 73, 95, 82, 35)
df4
# [문제21] iris 데이터에서 다름 기본 정보를 조회한다(기본정보조회)
# 타입, 구조, 차원, 변수이름, 기본통계량(평균, 표준편차, 사분위수)
class(iris)
dim(str)
str(iris)
summary(iris)
iris[order(iris$Petal.Length, decreasing = T)]
iris[order(iris$Petal.Length, decreasing = T),]
install.packages("readxl")
library(readxl)
getwd()
exam <- read_excel('indata/exam.xlsx')
exam
exam <- read_excel('inData/exam.xlsx') # 첫번째 sheet의 값을 read
exam
head(exam)
class(exam)
str(exam)
exam <- as.data.frame(exam)
exam
head(exam)
class(exam)
str(exam)
exam <- as.data.frame(exam)
exam
exam2 <- as.data.frame(read_excel('inData/exam.xlsx', sheet=2))
exam2
exam2
data
# 데이터 파일에 컬럼명이 없는 경우
city
# 데이터 파일에 컬럼명이 없는 경우
city <- read_excel('inData/data_ex.xls', col_names= F)
city <- as.data.frame(city)
head(city,3)
colnames(city) <- c('ID','gender','age','area')
city
.libPaths()
write.csv(exam, 'outData/exam.csv', row.names = T)
save(exam, file='outData/exam.rda') # exam 변수를 파일에 저장장
rm(list=ls(all.names = T))
exam
exam
load('outData/exam.rda')
head(exam)
data(mpg, package = "ggplot2")
class(mpg)
head(mpg)
midwest <- as.data.frame(ggplot2::midwest)
midwest
tail(mpg)
midwest
edit(mpg)
View(mpg)
# dim() 차원
dim(mpg)
str(mpg)
library(ggplot2)
library(ggplot2)
mpg <- rename(mpg, city=cty)
summary(mpg)
library(ggplot2)
mpg <- rename(mpg, city=cty)
mpg <- rename(mpg, city=cty)
lybrary(dplyr)
lybrary(dplyr)
library(dplyr)
mpg <- rename(mpg, city=cty)
mpg <- rename(mpg, c(city=cty, highwat=hwy))
mpg <- rename(mpg, c(city=cty, highwat=hwy))
mpg <- rename(mpg, c(city=cty, highway=hwy))
mpg <- rename(mpg, city=cty)
str(mpg)
mpg <- rename(mpg, highway=hwy)
str(mpg)
colnames(mpg)
# 파생변수 (total = (city+highway /2))
mpg$total
# 파생변수 (total = (city+highway /2))
mpg$total <- (mpg$city + mpg$highway)/2
mpg
head(mpg,3)
# 파생변수 (total연비가 평균보다 높은 그룹=pass , 평균보다 낮은 그룹= fail)
boxplot(mpg$total)
hist(mpg$total)
livrary(vioplot)
livrary(vioplot)
library(vioplot)
vioplot(mpg$total)
mpg$test <- ifelse(mpg$total >= mean(mpg$total), 'pass','fail')
table(mpg$test)
table(mpg$test)
library(ggplot2)
qplot(mpg$test, color=mpg$test)
qplot(mpg$test, color=mpg$test)
library(ggplot2)
qplot(mpg$test, color=mpg$test)
qplot(mpg$test, color=mpg$test)
