scale_fill_discrete(limits=c('female','male')) + # 범례 순서
theme(legend.position = c(.3,.8),
legend.title = element_text(face=3, color='red'))
ggplot(gender.ratio, aes(x='',y=ratio,fill=gender)) +
geom_col() +
coord_polar('y')
# 채점기준 ⑤ income의 최소값, 1분위수, 중위수, 3분위수, 최대값, 결측치 등을 탐색하고, boxplot과 월급의 빈도그래프를 시각화한다(2점).
summary(welfare$income)
boxplot(welfare$income)
ggplot(welfare, aes(y=income)) +
geom_boxplot()
ggplot(welfare, aes(income)) +
geom_histogram() + # 연속적인 자료 income을 계급으로 나누어 계급별 빈도그래프
coord_cartesian(xlim=c(0,1200))
# 채점기준 ⑥ income이 0인 데이터는 이상치로 정하고, 이상치를 결측 처리한다(1점).
b <- boxplot(welfare$income)$stat
table(welfare$income <= b[1])
welfare$income <- ifelse(welfare$income <= b[1],NA, welfare$income)
table(welfare$income <=b[1], useNA='ifany')
table(welfare$income >b[5], exclude = NULL) # 상위 이상치보다 큰 값이 5% 가량 되어 상위 이상치는 처리하지 않는다.
# 결측치 처리
temp <- welfare[,c('gender','income')]
m <- tapply(temp$income, temp$gender, median, na.rm=T)
m
head(temp)
temp$income <- ifelse(is.na(temp$income), m[temp$gender], temp$income)
head(temp)
# 채점기준 ⑦ 결측치를 제외한 데이터를 이용하여 성별에 따른 월급차이가 있는지를 분석한다(2점).
temp <- na.omit(welfare[,c('gender','income')])
summaryBy(income~gender, data=temp, FUN=c(mean,sd))
welfare %>%
group_by(gender) %>%
summarise(income.mean = mean(income, na.rm=T)) %>%
ggplot(aes(x=gender,y=income.mean)) +
geom_bar(stat='identity')
ggplot(welfare, aes(x=gender, y=income)) +
geom_point(position = 'jitter', col='blue', alpha=3)+
geom_violin() +
geom_boxplot(aes(col=gender),
fill='lightblue', width=.3, notch = T) +
coord_cartesian(ylim=c(0,1000))
t.test(income~gender, data=welfare)
head(age_income[order(-age_income$income.mean),],1)
ggplot(welfare, aes(x=age, y=income, fill=age)) +
geom_col()
ggplot(welfare, aes(x=age, y=income, fill=age)) +
geom_col()
welfare$age <- 2015 - welfare$birth + 1
boxplot(welfare$age)$stat
ggplot(welfare, aes(x=age, y=income, fill=age)) +
geom_col()
ggplot(data=welfare, aes(age))+ geom_bar()
# 채점기준 ④ 나이에 따른 월급의 차이가 있는지 관계를 분석한다(3점).
anova(fit)
fit <- lm(income~age, data=welfare)
# 채점기준 ④ 나이에 따른 월급의 차이가 있는지 관계를 분석한다(3점).
anova(fit)
ggplot(data=welfare, aes(age))+ geom_bar()
table(is.na(welfare$age))
table(is.na(welfare$gender))
table(is.na(welfare$gender))
welfare$income
# 채점기준 ④ 나이에 따른 월급의 차이가 있는지 관계를 분석한다(3점).
anova(fit)
t.test(income~gender, data=welfare)
summaryBy(income~gender, data=temp, FUN=c(mean,sd))
colSums(is.na(welfare))
head(welfare)
table(is.na(welfare))
colSums(is.na(welfare))
table(welfare$gender, useNA='ifany') # 이상치 없음
# 채점기준 ② gender 필드 변수의 결측치를 확인한다(1점).
table(is.na(welfare$gender)) # 결측치 없음
# 채점기준 ③ gender의 값이 1은 male로 2는 female로 변경하고 gender의 타입을 factor로 변경한다(1점).
welfare$gender <- ifelse(welfare$gender==1, 'male','female')
table(welfare$gender)
welfare$gender <- factor(welfare$gender, levels=c('male','female'))
gender.ratio <- welfare %>%
group_by(gender) %>%
summarise(ratio = n()/nrow(welfare)*100)
pie(gender.ratio$ratio,
labels=paste(gender.ratio$gender, round(gender.ratio$ratio, 2),'%'),
clockwise = T,
col=c('skyblue','pink'))
ggplot(gender.ratio, aes(x=gender,y=ratio, fill=gender)) +
#geom_col()
geom_bar(stat='identity') +
scale_x_discrete(limits=c('female','male')) + #축 순서
scale_fill_discrete(limits=c('female','male')) + # 범례 순서
theme(legend.position = c(.3,.8),
legend.title = element_text(face=3, color='red'))
ggplot(gender.ratio, aes(x=gender,y=ratio, fill=gender)) +
#geom_col()
geom_bar(stat='identity') +
scale_x_discrete(limits=c('female','male')) + #축 순서
scale_fill_discrete(limits=c('female','male')) + # 범례 순서
theme(legend.position = c(.3,.8),
legend.title = element_text(face=3, color='red'))
ggplot(gender.ratio, aes(x='',y=ratio,fill=gender)) +
geom_col() +
coord_polar('y')
ggplot(gender.ratio, aes(x='',y=ratio,fill=gender)) +
geom_col() +
coord_polar('y')
gender.ratio <- welfare %>%
group_by(gender) %>%
summarise(ratio = n()/nrow(welfare)*100)
pie(gender.ratio$ratio,
labels=paste(gender.ratio$gender, round(gender.ratio$ratio, 2),'%'),
clockwise = T,
col=c('skyblue','pink'))
ggplot(gender.ratio, aes(x=gender,y=ratio, fill=gender)) +
#geom_col()
geom_bar(stat='identity') +
scale_x_discrete(limits=c('female','male')) + #축 순서
scale_fill_discrete(limits=c('female','male')) + # 범례 순서
theme(legend.position = c(.3,.8),
legend.title = element_text(face=3, color='red'))
ggplot(gender.ratio, aes(x='',y=ratio,fill=gender)) +
geom_col() +
coord_polar('y')
# 채점기준 ⑤ income의 최소값, 1분위수, 중위수, 3분위수, 최대값, 결측치 등을 탐색하고, boxplot과 월급의 빈도그래프를 시각화한다(2점).
summary(welfare$income)
boxplot(welfare$income)
# 채점기준 ⑤ income의 최소값, 1분위수, 중위수, 3분위수, 최대값, 결측치 등을 탐색하고, boxplot과 월급의 빈도그래프를 시각화한다(2점).
summary(welfare$income)
# 채점기준 ⑤ income의 최소값, 1분위수, 중위수, 3분위수, 최대값, 결측치 등을 탐색하고, boxplot과 월급의 빈도그래프를 시각화한다(2점).
summary(welfare$income)
# 채점기준 ④ 성별 비율을 도표로 나타내고 그래프로 시각화한다(2점).
# 채점기준 ⑤ income의 최소값, 1분위수, 중위수, 3분위수, 최대값, 결측치 등을 탐색하고, boxplot과 월급의 빈
# 도그래프를 시각화한다(2점).
summary(welfare$income)
install.packages('foreign')
library(foreign) # SPSS 파일 불러오기
library(dplyr) # 전처리
library(doBy) # 전처리
library(ggplot2) # 시각화
library(readxl) # 엑셀파일 불러오기(code_job의 데이터)
welfare %>%
group_by(age,gender)
welfare %>%
group_by(age,gender)
welfare %>%
group_by(age,gender) %>%
summarise(mean_income=mean(income))
welfare %>%
group_by(age,gender) %>%
summarise(mean_income=mean(income),
median_income=median(income))
welfare %>%
group_by(age,gender) %>%
summarise(mean_income=mean(income),
median_income=median(income),
max_income=max(income),
min_income=min(income))
welfare %>%
filter(na.rm=T)
welfare %>%
filter(na.rm=T) %>%
group_by(age,gender) %>%
summarise(mean_income=mean(income),
median_income=median(income),
max_income=max(income),
min_income=min(income))
table(welfare$gender, useNA='ifany') # 이상치 없음
# 채점기준 ② gender 필드 변수의 결측치를 확인한다(1점).
table(is.na(welfare$gender)) # 결측치 없음
gender.ratio <- welfare %>%
group_by(gender) %>%
summarise(ratio = n()/nrow(welfare)*100)
ggplot(welfare, aes(income)) +
geom_histogram() + # 연속적인 자료 income을 계급으로 나누어 계급별 빈도그래프
coord_cartesian(xlim=c(0,1200))
temp$income <- ifelse(is.na(temp$income), m[temp$gender], temp$income)
head(temp)
ggplot(welfare, aes(x=age, y=income, fill=age)) +
geom_col()
ggplot(data=welfare, aes(age))+ geom_bar()
welfare %>%
group_by(age,gender) %>%
summarise(mean_income=mean(income),
median_income=median(income),
max_income=max(income),
min_income=min(income))
#  1번 문제의 결과인 data.frame변수를 이용하여 나이에 따른 월급 변화를 성별을 분리하여 시각화 하시오. 채점기준 ① 나이와 성별로 group_by하여 월급평균, 월급표준편차, 월급중앙값, 최소값과 최대값, 빈도을 산출 한다(5점).
welfare$income
welfare$income <- ifelse(welfare$income <= b[1],NA, welfare$income)
table(welfare$income >b[5], exclude = NULL) # 상위 이상치보다 큰 값이 5% 가량 되어 상위 이상치는 처리하지 않는다.
welfare %>%
group_by(age,gender) %>%
summarise(mean_income=mean(income),
median_income=median(income),
max_income=max(income),
min_income=min(income))
welfare %>%
group_by(age,gender) %>%
summarise(mean_income=mean(income),
median_income=median(income),
max_income=max(income),
min_income=min(income))
ggplot(data=welfare, aes(x=age,y=income.mean))
# 채점기준 ② 나이에 따른 월급평균의 추이를 아래와 같은 그래프를 시각화하고, 아래의 그래프를 파일로도 출력한다(5점).
income.mean <- mean(income)
# 채점기준 ② 나이에 따른 월급평균의 추이를 아래와 같은 그래프를 시각화하고, 아래의 그래프를 파일로도 출력한다(5점).
income.mean <- mean(welfare$income)
ggplot(data=welfare, aes(x=age,y=income.mean))
ggplot(data=welfare, aes(x=age,y=income.mean, fill=gender))
ggplot(data=welfare, aes(x=age,y=income.mean, fill=gender)) +
geom_line()
ggplot(data=welfare, aes(x=age,y=income.mean, fill=gender)) +
geom_line(gender)
ggplot(data=welfare, aes(x=age,y=income.mean, fill=gender)) +
geom_line()
welfare
welfare$job
welfare$code_job
welfare %>%
group_by(age,gender) %>%
summarise(mean_income=mean(income,na.rm=T),
median_income=median(income),
max_income=max(income),
min_income=min(income))
welfare %>%
group_by(age,gender) %>%
summarise(mean_income=mean(income,na.rm=T),
median_income=median(income,na.rm=T),
max_income=max(income,na.rm=T),
min_income=min(income,na.rm=T))
welfare$code_job
edit(welfare)
welfare %>%
group_by(code_job)
welfare %>%
group_by(code_job)
welfare %>%
group_by(code_job,income) %>%
welfare %>%
group_by(code_job,income) %>%
ggplot(aes(y=code_job,x=income))
welfare %>%
group_by(code_job,income)
ggplot(data=welfare, aes(age))+ geom_bar()
ggplot(age_income, aes(x=age, y=income.mean)) +
geom_line()
age_income <- welfare %>%
filter(!is.na(welfare$income)) %>%
group_by(age) %>%
summarise(income.mean = mean(income),
income.sd   = sd(income))
ggplot(age_income, aes(x=age, y=income.mean)) +
geom_line()
age_income <- welfare %>%
filter(!is.na(welfare$income)) %>%
group_by(age) %>%
summarise(income.mean = mean(income),
income.sd   = sd(income))
ggplot(age_income, aes(x=age, y=income.mean)) +
geom_line()
welfare %>%
group_by(age,gender) %>%
summarise(mean_income=mean(income,na),
median_income=median(income),
max_income=max(income),
min_income=min(income))
fit <- lm(income~age, data=welfare)
View(age_income)
head(age_income[order(-age_income$income.mean),],5)
# (2) 필요한 필드만 select
welfare <- raw_welfare[,c('h10_g3','h10_g4','h10_g10','h10_g11',
'h10_eco9','p1002_8aq1','h10_reg7')]
dim(welfare)
head(welfare)
table(welfare$gender, useNA='ifany') # 이상치 없음
# 채점기준 ② gender 필드 변수의 결측치를 확인한다(1점).
table(is.na(welfare$gender)) # 결측치 없음
# 채점기준 ③ gender의 값이 1은 male로 2는 female로 변경하고 gender의 타입을 factor로 변경한다(1점).
welfare$gender <- ifelse(welfare$gender==1, 'male','female')
table(welfare$gender)
table(welfare$gender)
welfare$gender <- factor(welfare$gender, levels=c('male','female'))
welfare
welfare <- rename(welfare, gender= h10_g3, #성별
birth = h10_g4, #연도
marriage = h10_g10, # 혼인
religion = h10_g11, # 종교
code_job = h10_eco9, # 직업코드
income = p1002_8aq1, # 월급
code_region = h10_reg7) # 지역코드
welfare
head(welfare)
head(welfare) %>%
group_by(gender)
head(welfare) %>%
group_by(gender) %>%
summarise(code_job)
# 9. 1번 문제의 결과인 data.frame변수를 이용하여 종교 유무에 따른 이혼률을 분석하시오. 채점기준 ① 종교 데이터인 religion 필드의 이상치 및 결측치를 확인한다(1점).
table(is.na(welfare$religion))
# 채점기준 ② religion 필드가 1이면 “종교-유”, 2이면 “종교-무”로 데이터를 변경한다(2점).
ifelse(welfare$religion == 1, '종교-유','종교-무')
# 9. 1번 문제의 결과인 data.frame변수를 이용하여 종교 유무에 따른 이혼률을 분석하시오. 채점기준 ① 종교 데이터인 religion 필드의 이상치 및 결측치를 확인한다(1점).
table(is.na(welfare$religion))
welfare$religion
# 채점기준 ② religion 필드가 1이면 “종교-유”, 2이면 “종교-무”로 데이터를 변경한다(2점).
ifelse(welfare$religion == 1, '종교-유','종교-무')
welfare$religion
# 채점기준 ② religion 필드가 1이면 “종교-유”, 2이면 “종교-무”로 데이터를 변경한다(2점).
welfare$religion <- ifelse(welfare$religion == 1, '종교-유','종교-무')
welfare$religion
welfare$religion
welfare$marriage
welfare$marriage_group <- iflese(welfare$marriage == 1, '기혼'| welfare$marriage == 3, '이혼','NA')
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼'| welfare$marriage == 3, '이혼','NA')
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼'| welfare$marriage == 3, '이혼',NA)
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼'| welfare$marriage == 3, '이혼',welfare$marriage)
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼'| welfare$marriage == 3, '이혼',NA,welfare$marriage)
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼'|| welfare$marriage == 3, '이혼',NA,welfare$marriage)
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼'|| welfare$marriage == 3, '이혼',NA,welfare$marriage)
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼','이혼',welfare$marriage)
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼',welfare$marriage)
welfare$marriage_group
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼',welfare$marriage==3, '미혼')
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼',welfare$marriage)
welfare$marriage_group
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼',NA)
welfare$marriage_group
welfare$marriage_group <- ifelse(welfare$marriage == c(1,3), '기혼','이혼',NA)
welfare$marriage_group <- ifelse(welfare$marriage == c(1,3), '기혼','이혼',NA)
welfare$marriage_group
welfare$marriage_group <- ifelse(welfare$marriage == 3, '기혼',NA)
welfare$marriage_group
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼',NA)
welfare$marriage_group
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼',NA)
welfare$marriage_group
welfare$marriage_group <- ifelse(welfare$marriage == 1, '기혼',NA)
welfare$marriage_group
# 채점기준 ③ 종교 유무의 빈도를 시각화한다(1점).
ggplot(data=welfare, religion)
# 채점기준 ③ 종교 유무의 빈도를 시각화한다(1점).
ggplot(data=welfare, aes(religion))
# 채점기준 ③ 종교 유무의 빈도를 시각화한다(1점).
ggplot(data=welfare, aes(religion)) +
geom_point()
# 채점기준 ③ 종교 유무의 빈도를 시각화한다(1점).
ggplot(data=welfare, aes(religion)) +
geom_bar()
# 채점기준 ③ 종교 유무의 빈도를 시각화한다(1점).
ggplot(data=welfare, aes(religion)) +
geom_histogram()
# 채점기준 ③ 종교 유무의 빈도를 시각화한다(1점).
ggplot(data=welfare, aes(religion, fill=religion)) +
geom_bar()
# 채점기준 ③ 종교 유무의 빈도를 시각화한다(1점).
ggplot(data=welfare, aes(religion, fill=religion)) +
geom_bar(stat='identity')
# 채점기준 ③ 종교 유무의 빈도를 시각화한다(1점).
ggplot(data=welfare, aes(religion, fill=religion)) +
geom_bar(stat='identity')
# 채점기준 ③ 종교 유무의 빈도를 시각화한다(1점).
ggplot(data=welfare, aes(religion, fill=religion)) +
geom_bar(stat=)
# 채점기준 ③ 종교 유무의 빈도를 시각화한다(1점).
ggplot(data=welfare, aes(religion, fill=religion)) +
geom_bar()
install.packages('rJava')
install.packages('memoise')
install.packages('KoNLP')
install.packages('KoNLP')
install.packages('devtools')
install.packages("C:/Users/tjoeun/Downloads/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
install.packages('hash')
install.packages('tau')
install.packages('Sejong')
install.packages("C:/Users/tjoeun/Downloads/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
install.packages('RSQLite')
install.packages("C:/Users/tjoeun/Downloads/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
.libPaths()
install.packages("C:/Users/tjoeun/Downloads/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
install.packages('KoNLP')
install.packages('devtools')
library(KoNLP)
(KoNLP)
library(KoNLP)
useNIADic()
library(KoNLP)
install.packages("C:/Users/tjoeun/Downloads/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
useNIADic()
extractNoun("대한민국의 영토는 한반도와 그 부속 도서로 한다")
library(KoNLP)
useNIADic()
useNIADic()
extractNoun("대한민국의 영토는 한반도와 그 부속 도서로 한다")
library(KoNLP)
useNIADic()
.libPaths()
library(KoNLP)
useNIADic()
useSejongDic()
library(ggiraphExtra)
library(mapproj)
library(maps)
library(ggiraphExtra)
library(mapproj)
library(maps)
library(tibble) # 행이름을 변수로 하기 위한 작업
head(USArrests)
.libPaths()
#### 2. ggiraphExtra 패키지를 이용한 인터렉티브한 지도 시각화 ####
## 2.1 미국 주별 각력 범죄율 시각화
# (1) 패키지 준비
install.packages('ggiraphExtra') # 지도시각화를 위한 패키지
install.packages('mapproj') # ggChoropleth 함수 사용을 위한 패키지
install.packages('maps') # 지도 정보 이용
library(ggmap)
library(stringr)
library(ggplot2)
head(USArrests)
crime <- rownames_to_column(USArrests, var='state')
head(crime,1)
head(crime,3)
map_data('state')
crime$state <- tolower(crime$state)
head(crime,3)
state_map <- map_data('state')
View(state_map)
# (4) 지도 시각화
ggChoropleth(data=crime, # 지도에 표현할 데이터
aes(fill=Murder, # 지도에 채워질 변수
map_id=state) # 지도에 나타날 지역
map= state_map, #위도 경도 데이터
interactive=T)
# (4) 지도 시각화
ggChoropleth(data=crime, # 지도에 표현할 데이터
aes(fill=Murder, # 지도에 채워질 변수
map_id=state), # 지도에 나타날 지역
map= state_map, #위도 경도 데이터
interactive= T)
install.packages('stringi')
install.packages('devtools')
devtools::install_github('cardiomoon/kormaps2014')
library(kormaps2014)
head(kormap1)
View(kormap1)
View(korpop1) # 2015년 센서스
# korpop1$name : UTF-8 을 CP494로 변환
library(stringi)
korpop1$name <- iconv(korpop1$name, 'UTF-8','CP949')
# korpop1$name : UTF-8 을 CP494로 변환
library(stringi)
library(kormaps2014)
korpop1$name <- iconv(korpop1$name, 'UTF-8','CP949')
View(korpop1) # 2015년 센서스 데이터
korpop1$name <- iconv(korpop1$name, 'UTF-8','CP949')
str(changeCode(korpop1))
head(korpop1)
head(kormap1)
head(kormap1,2)
head(korpop1[,c('행정구역별_읍면동','총인구_명','code')])
colnames(korpop1)
library(dplyr)
korpop1 <- rename(korpop1, pop=총인구_명,
name=행정구역별_읍면동)
head(korpop1[,c('name','pop','code')])
korpop1$name <- iconv(korpop1$name, 'UTF-8','CP949')
install.packages('stringi')
install.packages('devtools')
devtools::install_github('cardiomoon/kormaps2014')
library(kormaps2014)
install.packages("devtools")
library(kormaps2014)
library(ggiraphExtra)
library(mapproj)
library(maps)
library(tibble) # 행이름을 변수로 하기 위한 작업
library(ggplot2)
library(ggplot2)
# korpop1$name : UTF-8 을 CP494로 변환
library(stringi)
str(changeCode(korpop1))
head(korpop1)
head(kormap1,2)
head(kormap1,2) # 2015 년 센서스 데이터(시도별)
str(korpop1)
str(changeCode(korpop1))
korpop1 <- rename(korpop1, pop=총인구_명,
name=행정구역별_읍면동)
korpop1 <- rename(korpop1, pop=총인구_명,
name=행정구역별_읍면동)
head(korpop1[,c('name','pop','code')])
library(stringr)
korpop1 <- rename(korpop1, pop=총인구_명,
name=행정구역별_읍면동)
korpop1 <- rename(korpop1, pop=총인구_명,
name=행정구역별_읍면동)
library(dplyr)
korpop1 <- rename(korpop1, pop=총인구_명,
name=행정구역별_읍면동)
head(korpop1[,c('name','pop','code')])
korpop1$name <- iconv(korpop1$name, 'UTF-8','CP949')
head(korpop1[,c('name','pop','code')])
ggChoropleth()
ggChoropleth(data=korpop1,
aes(fill=pop,
map_id=code),
map=kormap1,
interactive = T)
ggChoropleth(data=korpop1, #지도에 표현할 데이터 셋
aes(fill=pop, #지도에 채워질 변수
map_id=code,
tooltip=name), #지역 구분 변수
map=kormap1, #위도 경도 지도 데이터
interactive = T)
