mpg1 %>%
mutate(ttl = cty+hwy)
# • Q2. 앞에서 만든 '합산 연비 변수'를 2로 나눠 '평균 연비 변수'를 추가세요.
mpg1 %>%
mutate(avg_ttl = ttl/2)
# • Q2. 앞에서 만든 '합산 연비 변수'를 2로 나눠 '평균 연비 변수'를 추가세요.
mpg1 %>%
mutate(avg_ttl = cty+hwy/2)
mpg1 %>%
mutate(ttl = cty+hwy)
# • Q2. 앞에서 만든 '합산 연비 변수'를 2로 나눠 '평균 연비 변수'를 추가세요.
mpg1 %>%
mutate(avg_ttl = cty+hwy/2)
mpg1 %>%
mutate(ttl = cty+hwy)
# • Q2. 앞에서 만든 '합산 연비 변수'를 2로 나눠 '평균 연비 변수'를 추가세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
group_by(class)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
group_by(class)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(avg_ttl)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(manufacturer)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(class) %>%
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(class)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(class)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(class)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(class) %>%
head(3)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(manufacturer) %>%
head(3)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(manufacturer) %>%
head(3)
mpg1 %>%
group_by(manufacturer)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-(cty+hwy)/2) %>%
group_by(manufacturer) %>%
head(3)
mpg1 %>%
group_by(manufacturer) %>%
arrange(-(cty+hwy)/2)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(manufacturer) %>%
head(3)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(class) %>%
head(3)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(class) %>%
head(3)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
arrange(-avg_ttl) %>%
group_by(class) %>%
head(3)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg1 %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
group_by(class) %>%
summarise(mean_avg=mean(avg_ttl)) %>%
arrange(-mean_avg) %>%
head(3)
# • Q4. 1~3번 문제를 해결할 수 있는 하나로 연결된 dplyr 구문을 만들어
# 출력하세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.
mpg %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
group_by(class) %>%
summarise(mean_avg=mean(avg_ttl)) %>%
arrange(-mean_avg) %>%
head(3)
mpg
mpg %>%
group_by(class == 'suv')
mpg %>%
filter(class == 'suv')
mpg %>%
filter(class == 'suv')
# • Q4. 1~3번 문제를 해결할 수 있는 하나로 연결된 dplyr 구문을 만들어
# 출력하세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.
mpg %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
group_by(class) %>%
summarise(mean_avg=mean(avg_ttl)) %>%
arrange(-mean_avg) %>%
head(3)
#######################
## 혼자 해보기 (1)  ###
#######################
# 혼자서 해보기1 : mpg 데이터를 이용해 분석 문제를 해결해 보세요.
# • Q1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4
# 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지
# 알아보세요.
mpg %>%
filter(displ <= 4 | displ >= 5)
#######################
## 혼자 해보기 (1)  ###
#######################
# 혼자서 해보기1 : mpg 데이터를 이용해 분석 문제를 해결해 보세요.
# • Q1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4
# 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지
# 알아보세요.
mpg %>%
filter(displ <= 4 | displ >= 5) %>%
mutate(group=ifelse(displ<=4,"4이하",ifelse(displ>=5,'5이상',NA))) %>%
group_by(group) %>%
summarise(mean_total = mean(hwy))
#######################
## 혼자 해보기 (1)  ###
#######################
# 혼자서 해보기1 : mpg 데이터를 이용해 분석 문제를 해결해 보세요.
# • Q1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4
# 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지
# 알아보세요.
mpg %>%
filter(displ <= 4 | displ >= 5) %>%
mutate(group=ifelse(displ<=4,"4이하",ifelse(displ>=5,'5이상',NA))) %>%
group_by(group) %>%
summarise(mean_total = mean(hwy))
mpg %>%
filter(class == 'suv')
mpg %>%
filter(class %in% 'suv')
mpg %>%
filter(class %in% 'suv','compact')
mpg %>%
filter(class %in% c('suv','compact'))
mpg %>%
filter(class)
mpg %>%
group_by(class)
mpg %>%
group_by(class) %>%
summarise(mean_avg = (cty+hwy)/2)
# • Q4. 1~3번 문제를 해결할 수 있는 하나로 연결된 dplyr 구문을 만들어
# 출력하세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.
mpg %>%
mutate(ttl = cty+hwy,
avg_ttl = ttl/2) %>%
group_by(class) %>%
summarise(mean_avg=mean(avg_ttl)) %>%
arrange(-mean_avg) %>%
head(3)
group_by(class) %>%
summarise(mean_avg = avg)
group_by(class) %>%
summarise(avg)
mpg %>%
mutate(avg = (cty+hwy)/2) %>%
group_by(class) %>%
summarise(avg)
mpg %>%
mutate(avg = (cty+hwy)/2) %>%
group_by(class) %>%
summarise(avg) %>%
arrange(-avg)
mpg %>%
group_by(class)
mpg %>%
group_by(class) %>%
summarise(mean_ttl = (cty+hwy)/2)
mpg %>%
group_by(class) %>%
summarise(mean_ttl = (cty+hwy)/2)
#######################
## 혼자 해보기 (4)  ###
#######################
#
# 혼자서 하기4. mpg 데이터를 이용해서 분석 문제를 해결해 보세요.
# • Q1. mpg 데이터의 class는 "suv"
# , "compact" 등 자동차를 특징에 따라
# 일곱 종류로 분류한 변수입니다. 어떤 차종의 연비가 높은지 비교해보려고 합니다.
# class별 cty 평균을 구해보세요.
mpg %>%
filter(displ <= 4 | displ >= 5) %>%
mutate(group=ifelse(displ<=4,"4이하",ifelse(displ>=5,'5이상',NA))) %>%
group_by(group) %>%
summarise(mean_total = mean(hwy))
mpg %>%
group_by(class) %>%
summarise(mean_ttl = (cty+hwy)/2)
mpg
mpg %>%
mutate(group=class)
mpg %>%
mutate(group=class) %>%
group_by(group)
mpg %>%
mutate(group=class) %>%
group_by(group) %>%
summarise(mean_ttl = (cty+hwy)/2)
mpg %>%
mutate(group=class) %>%
group_by(group) %>%
summarise(mean_ttl = (cty+hwy)/2)
mpg %>%
mutate(group=class) %>%
group_by(group) %>%
summarise(mean_ttl = (cty+hwy)/2)
mpg %>%
mutate(group=class) %>%
group_by(group) %>%
summarise(mean_ttl = (cty+hwy)/2) %>%
filter(!is.na=(meat_ttl))
mpg %>%
mutate(group=class) %>%
group_by(group) %>%
summarise(mean_ttl = (cty+hwy)/2) %>%
filter(meat_ttl)
mpg %>%
mutate(group=class) %>%
group_by(group) %>%
summarise(mean_ttl = (cty+hwy)/2)
mpg %>%
mutate(group=class) %>%
group_by(group) %>%
summarise(mean_ttl = (cty+hwy)/2)
mpg %>%
mutate(group=class) %>%
group_by(group) %>%
summarise(mean_ttl = (cty+hwy)/2)
#######################
## 혼자 해보기 (4)  ###
#######################
#
# 혼자서 하기4. mpg 데이터를 이용해서 분석 문제를 해결해 보세요.
# • Q1. mpg 데이터의 class는 "suv"
# , "compact" 등 자동차를 특징에 따라
# 일곱 종류로 분류한 변수입니다. 어떤 차종의 연비가 높은지 비교해보려고 합니다.
# class별 cty 평균을 구해보세요.
mpg %>%
filter(displ <= 4 | displ >= 5) %>%
mutate(group=ifelse(displ<=4,"4이하",ifelse(displ>=5,'5이상',NA))) %>%
group_by(group) %>%
summarise(mean_total = mean(hwy))
df <- mpg
df$group <- iflese(df$displ<=4, "4이하",ifelse(df$displ>=5,"5이상",NA))
df$group <- ifelse(df$displ<=4, "4이하",ifelse(df$displ>=5,"5이상",NA))
table(df$group,useNA='ifany')
head(df)
tapply(df$hwy,df$group,mean)
table(df$group,useNA='ifany') #useNA='ifany' 추가하면 결측치까지
ex2 %>%
filter(class %in% c('suv','compact')) %>%
group_by(class) %>%
summarise(mean_cty = mean(cty))
ex3 %>%
group_by(class) %>%
summarise(mean_hwy = mean(hwy)) %>%
head(5) %>%
arrange(-mean_hwy)
mpg %>%
mutate(group=class) %>%
group_by(group) %>%
summarise(mean_ttl = (cty+hwy)/2)
mpg %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(-mean_hwy)
mpg %>%
filter(class=='compact')
source("D:/jk/bigdata/src/06_R/ch06_dplyr 패키지를 이용한 데이터 전처리.R", encoding = 'UTF-8', echo=TRUE)
mpg %>%
filter(class=='compact') %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(-mean_hwy)
data(mpg, package = "ggplot2")
class(mpg)
head(mpg)
midwest <- as.data.frame(ggplot2::midwest)
midwest
tail(mpg)
edit(mpg)
mpg %>%
filter(class=='compact') %>%
group_by(manufacturer)
mpg %>%
filter(class=='compact') %>%
group_by(manufacturer) %>%
summarise(cnt = n())
mpg %>%
filter(class=='compact') %>%
group_by(manufacturer) %>%
summarise(cnt = n()) %>%
arrange(-cnt)
### 4. 데이터 합치기 ###
# 열합치기: cbind, left_join(dplyr 패키지 로드)
?dplyr
library(dplyr)
test1 <- data.frame(id=c(1,2,3,4,5),
midterm=c(100,200,400,500,800))
test2 <- data.frame(id=c(1,2,3,4,5),
final=c(55,66,77,88,99),
teacherid=c(1,1,2,2,3))
teacher <- data.frame(teacherid=c(1,2,3),
teachername=c('Kim','Park','Hong'))
cbind(test1,test2)
bind_cols(test1,test2)
merge(test1,test2)
left_join(test1,test2,by='id')
test2
cbind(test2,teacher)
merge(test2, teacher, by='teacherid')
left_join(test2, teacher=, by='teacherid')
left_join(test2, teacher, by='teacherid')
test2 <- data.frame(id=c(1,2,3,4,5),
final=c(55,66,77,88,99),
teacherid=c(1,1,2,2,3))
teacher <- data.frame(teacherid=c(1,2,3),
teachername=c('Kim','Park','Hong'))
test2 <- data.frame(id=c(1,2,3,4,5),
final=c(55,66,77,88,99),
teacherid=c(1,1,2,2,4))
teacher <- data.frame(teacherid=c(1,2,3),
teachername=c('Kim','Park','Hong'))
left_join(test2, teacher, by='teacherid')
merge(test2, teacher, by='teacherid')
merge(test2, teacher, by='teacherid', all=TRUE)
group.a <- data.frame(id=c(1,2,3,4,5))
group.a <- data.frame(id=c(1,2,3,4,5),
test=c(100,90,80,70,60))
group.b <- data.frame(id=c(6,7,8,9,10))
group.b <- data.frame(id=c(6,7,8,9,10),
test=c(50,55,60,65,100))
rbind(group.a,group.b)
bind_rows(group.a,group.b)
group.a <- data.frame(id=c(1,2,3,4,5),
test1=c(100,90,80,70,60))
group.b <- data.frame(id=c(6,7,8,9,10),
test2=c(50,55,60,65,100))
rbind(group.a,group.b)
rbind(group.a,group.b)
bind_rows(group.a,group.b)
bind_rows(group.a,group.b)
merge(group.a,group.b)
merge(group.a,group.b, all=T)
# 혼자서 해보기 5. mpg 데이터를 이용해서 분석 문제를 해결해 보세요.
# mpg 데이터의 fl 변수는 자동차에 사용하는 연료(fuel)를 의미합니다. 아래는 자동차
# 연료별 가격을 나타낸 표입니다.
# fl 연료 종류 가격
fl
# 혼자서 해보기 5. mpg 데이터를 이용해서 분석 문제를 해결해 보세요.
# mpg 데이터의 fl 변수는 자동차에 사용하는 연료(fuel)를 의미합니다. 아래는 자동차
# 연료별 가격을 나타낸 표입니다.
# fl 연료 종류 가격
mpg$fl
fuel
fuel <- data.frame(fl=c('c','d','e','p','r'),
kind=c('CNG','diesel','ethanol E85','premium','regular'))
fuel <- data.frame(fl=c('c','d','e','p','r'),
kind=c('CNG','diesel','ethanol E85','premium','regular'),
price_fl=c(2.35,2.38,2.11,2.76,2.22))
fuel <- data.frame(fl=c('c','d','e','p','r'),
kind=c('CNG','diesel','ethanol E85','premium','regular'),
price_fl=c(2.35,2.38,2.11,2.76,2.22))
fuel
fuel <- data.frame(fl=c('c','d','e','p','r'),
kind=c('CNG','diesel','ethanol E85','premium','regular'),
price_fl=c(2.35,2.38,2.11,2.76,2.22))
fuel
# • Q1. mpg 데이터에는 연료 종류를 나타낸 fl 변수는 있지만 연료
# 가격을 나타낸 변수는 없습니다. 위에서 만든 fuel 데이터를 이용해서
# mpg 데이터에 price_fl(연료 가격) 변수를 추가하세요.
left_join(mpg, fuel)
# • Q1. mpg 데이터에는 연료 종류를 나타낸 fl 변수는 있지만 연료
# 가격을 나타낸 변수는 없습니다. 위에서 만든 fuel 데이터를 이용해서
# mpg 데이터에 price_fl(연료 가격) 변수를 추가하세요.
left_join(mpg, fuel[,c('fl,'price_fl)],by='fl')
# • Q1. mpg 데이터에는 연료 종류를 나타낸 fl 변수는 있지만 연료
# 가격을 나타낸 변수는 없습니다. 위에서 만든 fuel 데이터를 이용해서
# mpg 데이터에 price_fl(연료 가격) 변수를 추가하세요.
left_join(mpg, fuel[,c('fl',price_fl)],by='fl')
# • Q1. mpg 데이터에는 연료 종류를 나타낸 fl 변수는 있지만 연료
# 가격을 나타낸 변수는 없습니다. 위에서 만든 fuel 데이터를 이용해서
# mpg 데이터에 price_fl(연료 가격) 변수를 추가하세요.
left_join(mpg, fuel[,c('fl','price_fl')],by='fl')
# (2) merge 사용
data(mpg, package =  'ggplot2')
mpg <- merge((mpg, fuel[,c('fl','price_fl')],by='fl'))
mpg <- merge((mpg, fuel[,c('fl','price_fl')]),by='fl')
mpg <- merge(mpg, fuel[,c('fl','price_fl')],by='fl')
mpg
mpg %>%
select(model, fl, price_fl)
mpg %>%
select(model, fl, price_fl) %>%
head(5)
subset(mpg,select=c('model', 'fl', 'price_fl'))[1:5,]
head(subset(mpg,select=c('model', 'fl', 'price_fl')),5)
# Q3. mpg에 kind변수도 추가
fuel[,c('fl','kind')]
mpg <- left_join(mpg, fuel[,c('fl','kind')],by='f1')
mpg <- left_join(mpg, fuel[,c('fl','kind')],by='fl')
head(mpg)
data(mpg, package='ggplot2')
names(mpg)
fuel[fuel$fl =='c','kind']
return(kind)
return(kind)
kind <- fuel[fuel$fl==fl,'kind']
fuel[fuel$fl =='c','kind']
fuel[fuel$fl =='c','kind']
flToKind <- function(fl){
kind <- fuel[fuel$fl==fl,'kind']
return(kind)
}
flToKind
flToKind
flToKind('r')
mpg$kind <- apply(mpg[,'fl', drop=F],1,flToKind)
head(mpg)
## 5.1 결측치 정제하기
df <- data.frame(name=c('Kim','Yi','Yun','Hong','Park'),
gender = c('M','F',NA,'F','M'),
socre= c(5,4,3,2,NA),
income=c(2000,3000,4000,5000,6000))
df
df$gender <- as.factor()
df$gender <- as.factor(df$gender)
dim(df)
is.na(df)
apply(is.na(df),2, sum)
colSums(is.na(df))
df
na.omit(df)
